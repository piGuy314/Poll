<h1>Welcom to Poll! A site of the people, by the people and for the people! </h1>

<script type="text/x-template" id="poll-question">
  <li>
    <label :title="question.text" :for="question.id">
        {{ question.text }}
    </label>
    <span class="votes">({{ question.votes }})</span>
    <input type="radio"
      name="pollQuestion"
      :id="question.id"
      v-on:click="incrementQuestionVote"
      :value="question.text">
      <transition
      appear
      v-on:appear="appearRenderHook"
      v-on:after-appear="afterAppearRenderHook">
      <span class="vote-count" :style="{ width : calcWidth() }"></span>
    </transition>

  </li>
</script>

<div id="poll-container">
  <h1>{{ title }}</h1>
  {{ totalVotes }}
  <p>You picked <em>{{ votedFor.text }}</em>
  <p>Total number of votes: {{ countVotes }} </p>
  <ul class="list-unstyled">
    <poll-question v-for="q in questions" v-bind:question="q" v-on:voted="displayVote" :votes="totalVotes" v-bind:key="q.id">
    </poll-question>
    </ul>
    <div v-if="showError" class="error alert">Error. Make a selection first</div>
  <button type="submit" v-on:click="submitVote" :disabled="pollIsDisabled">Cast Vote</button>
</div>
<script>
//underscore mixin to generate guid used for quesstion ids
  _.mixin({
  guid: function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }
});

//json data for questions loaded into poll
//assume this will be loaded from external API down the road
var questionData = [{
  id: 'question-' + _.guid(),
  text: 'Learn JavaScript',
  votes: 50
},
{
  id: 'question-' + _.guid(),
  text: 'Learn Vue',
  votes: 10
},
{
  id: 'question-' + _.guid(),
  text: 'Build something awesome',
  votes: 40
}];

//component for a poll question
//loads template from html pane
Vue.component('poll-question', {
  props: ['question', 'votes'],
  template: '#poll-question',
  methods: {
    incrementQuestionVote: function(){
      this.$emit('voted', this.question);
    },
    calcWidth: function(){
      return this.question.votes/this.votes * 100 + '%';
    },
    appearRenderHook: function(el){
      el.style.width = 0;
    },
    afterAppearRenderHook: function(el){
      el.style.width = this.calcWidth();
    }
  }
});

var poll = new Vue({
  el: '#poll-container',
  data: {
    showError: false,
    pollIsDisabled: false,
    title: 'Poll Title',
    totalVotes: 0,
    votedFor: '',
    questions: questionData
  },
  methods: {
    displayVote: function(e){
      this.showError = false;
      this.votedFor = e;
    },
    submitVote: function(e){
      if(!_.isUndefined(this.votedFor) && !_.isEmpty(this.votedFor)){
        this.votedFor.votes +=1;
        this.pollIsDisabled = true;
      }
      else {
        this.showError = true;
      }
    }
  },
  computed: {
    countVotes: function(){
      var _sum = 0;
      _.each(this.questions, function(e){
        _sum += e.votes;
      });
      return this.totalVotes = _sum;
    }
  }
});
</script>
